"""
Startup Valuation Calculator
Application Streamlit pour calculer la valorisation d'une startup selon plusieurs m√©thodes
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import math
from io import BytesIO
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from datetime import datetime

# Configuration de la page
st.set_page_config(
    page_title="Startup Valuation Calculator",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .method-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .metric-card {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .saved-result {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 0.75rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Donn√©es de r√©f√©rence pour les multiples sectoriels
SECTOR_MULTIPLES = {
    "Technologie": {"Revenue": 6.5, "EBITDA": 15.2},
    "SaaS": {"Revenue": 8.2, "EBITDA": 18.5},
    "E-commerce": {"Revenue": 3.1, "EBITDA": 12.8},
    "Fintech": {"Revenue": 7.8, "EBITDA": 16.9},
    "Biotech": {"Revenue": 12.4, "EBITDA": 25.6},
    "Cleantech": {"Revenue": 4.7, "EBITDA": 13.1},
    "Marketplace": {"Revenue": 5.3, "EBITDA": 14.7},
    "Media": {"Revenue": 2.8, "EBITDA": 9.4},
    "Manufacturing": {"Revenue": 1.9, "EBITDA": 8.2},
    "Retail": {"Revenue": 1.4, "EBITDA": 6.8}
}

class ValuationCalculator:
    """Classe principale pour les calculs de valorisation"""
    
    @staticmethod
    def dcf_valuation(cash_flows, growth_rate, discount_rate, terminal_growth=0.02):
        """
        Calcul DCF (Discounted Cash Flow)
        
        Args:
            cash_flows: Liste des flux de tr√©sorerie pr√©visionnels
            growth_rate: Taux de croissance annuel
            discount_rate: Taux d'actualisation (WACC)
            terminal_growth: Taux de croissance terminal
        
        Returns:
            dict: Valorisation et d√©tails du calcul
        """
        if not cash_flows or len(cash_flows) == 0:
            return {"valuation": 0, "error": "Flux de tr√©sorerie requis"}
        
        # Calcul des flux actualis√©s
        discounted_flows = []
        cumulative_pv = 0
        
        for i, cf in enumerate(cash_flows):
            year = i + 1
            discounted_cf = cf / ((1 + discount_rate) ** year)
            discounted_flows.append(discounted_cf)
            cumulative_pv += discounted_cf
        
        # Valeur terminale
        if len(cash_flows) > 0:
            terminal_cf = cash_flows[-1] * (1 + terminal_growth)
            terminal_value = terminal_cf / (discount_rate - terminal_growth)
            terminal_pv = terminal_value / ((1 + discount_rate) ** len(cash_flows))
        else:
            terminal_pv = 0
        
        total_valuation = cumulative_pv + terminal_pv
        
        return {
            "valuation": total_valuation,
            "operating_value": cumulative_pv,
            "terminal_value": terminal_pv,
            "discounted_flows": discounted_flows,
            "terminal_pv": terminal_pv
        }
    
    @staticmethod
    def market_multiples_valuation(revenue_or_ebitda, multiple, metric_type="Revenue"):
        """
        Valorisation par multiples de march√©
        
        Args:
            revenue_or_ebitda: Chiffre d'affaires ou EBITDA
            multiple: Multiple sectoriel
            metric_type: Type de m√©trique ("Revenue" ou "EBITDA")
        
        Returns:
            dict: Valorisation et d√©tails
        """
        valuation = revenue_or_ebitda * multiple
        
        return {
            "valuation": valuation,
            "metric": revenue_or_ebitda,
            "multiple": multiple,
            "metric_type": metric_type
        }
    
    @staticmethod
    def scorecard_valuation(base_valuation, criteria_scores, criteria_weights=None):
        """
        Scorecard Method
        
        Args:
            base_valuation: Valorisation de base de r√©f√©rence
            criteria_scores: Dict des scores par crit√®re (0-5)
            criteria_weights: Dict des pond√©rations par crit√®re
        
        Returns:
            dict: Valorisation ajust√©e et d√©tails
        """
        if criteria_weights is None:
            criteria_weights = {
                "team": 0.25,
                "product": 0.20,
                "market": 0.20,
                "competition": 0.15,
                "financial": 0.10,
                "legal": 0.10
            }
        
        # Score pond√©r√© (3 = moyenne, facteur neutre)
        weighted_score = 0
        for criterion, score in criteria_scores.items():
            weight = criteria_weights.get(criterion, 0)
            # Conversion score (0-5) vers facteur multiplicateur (0.5-1.5)
            factor = 0.5 + (score / 5.0)
            weighted_score += weight * factor
        
        adjusted_valuation = base_valuation * weighted_score
        
        return {
            "valuation": adjusted_valuation,
            "base_valuation": base_valuation,
            "adjustment_factor": weighted_score,
            "criteria_analysis": {
                criterion: {
                    "score": score,
                    "weight": criteria_weights.get(criterion, 0),
                    "contribution": criteria_weights.get(criterion, 0) * (0.5 + score/5.0)
                }
                for criterion, score in criteria_scores.items()
            }
        }
    
    @staticmethod
    def berkus_valuation(criteria_scores):
        """
        Berkus Method - M√©thode sp√©cifique aux startups pr√©-revenus
        
        Args:
            criteria_scores: Dict des scores (0-5) pour les 5 crit√®res Berkus
        
        Returns:
            dict: Valorisation et r√©partition par crit√®re
        """
        max_value_per_criterion = 500000  # 500k‚Ç¨ max par crit√®re
        
        criteria_mapping = {
            "concept": "Solidit√© du concept/id√©e",
            "prototype": "Prototype/MVP fonctionnel",
            "team": "Qualit√© de l'√©quipe dirigeante",
            "strategic_relationships": "Relations strat√©giques",
            "product_rollout": "Lancement produit/premiers clients"
        }
        
        valuation_breakdown = {}
        total_valuation = 0
        
        for criterion, score in criteria_scores.items():
            criterion_value = (score / 5.0) * max_value_per_criterion
            valuation_breakdown[criterion] = {
                "name": criteria_mapping.get(criterion, criterion),
                "score": score,
                "value": criterion_value
            }
            total_valuation += criterion_value
        
        return {
            "valuation": total_valuation,
            "breakdown": valuation_breakdown,
            "max_possible": len(criteria_scores) * max_value_per_criterion
        }
    
    @staticmethod
    def risk_factor_summation(base_valuation, risk_factors):
        """
        Risk Factor Summation Method
        
        Args:
            base_valuation: Valorisation de base
            risk_factors: Dict des facteurs de risque (-2 √† +2)
        
        Returns:
            dict: Valorisation ajust√©e par les risques
        """
        risk_categories = {
            "management": "Risque de gestion",
            "stage": "Risque li√© au stade de d√©veloppement",
            "legislation": "Risque l√©gislatif/politique",
            "manufacturing": "Risque de production",
            "sales": "Risque commercial/marketing",
            "funding": "Risque de financement",
            "competition": "Risque concurrentiel",
            "technology": "Risque technologique",
            "litigation": "Risque juridique",
            "international": "Risque international",
            "reputation": "Risque de r√©putation",
            "exit": "Risque de sortie/liquidit√©"
        }
        
        # Chaque facteur peut ajuster la valorisation de -25% √† +25%
        total_adjustment = 0
        risk_analysis = {}
        
        for factor, rating in risk_factors.items():
            # Rating de -2 (tr√®s risqu√©) √† +2 (tr√®s favorable)
            adjustment_pct = rating * 0.125  # Max ¬±25% total, ¬±12.5% par facteur
            total_adjustment += adjustment_pct
            
            risk_analysis[factor] = {
                "name": risk_categories.get(factor, factor),
                "rating": rating,
                "adjustment": adjustment_pct
            }
        
        # Limitation de l'ajustement total √† ¬±50%
        total_adjustment = max(-0.5, min(0.5, total_adjustment))
        
        adjusted_valuation = base_valuation * (1 + total_adjustment)
        
        return {
            "valuation": adjusted_valuation,
            "base_valuation": base_valuation,
            "total_adjustment": total_adjustment,
            "risk_analysis": risk_analysis
        }
    
    @staticmethod
    def venture_capital_method(expected_revenue, exit_multiple, required_return, years_to_exit=5, investment_needed=None):
        """
        Venture Capital Method
        
        Args:
            expected_revenue: Revenus attendus √† la sortie
            exit_multiple: Multiple de sortie (ex: 5x revenue)
            required_return: Retour sur investissement annuel requis
            years_to_exit: Ann√©es jusqu'√† la sortie
            investment_needed: Montant d'investissement n√©cessaire
        
        Returns:
            dict: Valorisation pr√©-money et post-money
        """
        # Valeur √† la sortie
        exit_value = expected_revenue * exit_multiple
        
        # Valeur actuelle (valeur terminale actualis√©e)
        present_value = exit_value / ((1 + required_return) ** years_to_exit)
        
        result = {
            "exit_value": exit_value,
            "present_value": present_value,
            "expected_return_multiple": (exit_value / present_value) if present_value > 0 else 0,
            "annualized_return": ((exit_value / present_value) ** (1/years_to_exit) - 1) if present_value > 0 else 0
        }
        
        if investment_needed:
            # Pourcentage de participation n√©cessaire
            ownership_needed = investment_needed / present_value if present_value > 0 else 0
            pre_money_valuation = present_value - investment_needed
            post_money_valuation = present_value
            
            result.update({
                "ownership_percentage": ownership_needed,
                "pre_money_valuation": pre_money_valuation,
                "post_money_valuation": post_money_valuation,
                "investment_needed": investment_needed
            })
        
        return result

def create_dcf_chart(result, cash_flows):
    """Cr√©er un graphique pour la m√©thode DCF"""
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('Flux de tr√©sorerie par ann√©e', 'Valeurs actualis√©es',
                       'R√©partition de la valeur', 'Projection'),
        specs=[[{"type": "bar"}, {"type": "bar"}],
               [{"type": "pie"}, {"type": "scatter"}]]
    )
    
    # Graphique 1: Flux de tr√©sorerie
    years = [f"Ann√©e {i+1}" for i in range(len(cash_flows))]
    fig.add_trace(
        go.Bar(x=years, y=cash_flows, name="Flux de tr√©sorerie", marker_color='lightblue'),
        row=1, col=1
    )
    
    # Graphique 2: Valeurs actualis√©es
    fig.add_trace(
        go.Bar(x=years, y=result['discounted_flows'], name="Valeurs actualis√©es", marker_color='darkblue'),
        row=1, col=2
    )
    
    # Graphique 3: R√©partition de la valeur
    fig.add_trace(
        go.Pie(
            labels=['Valeur op√©rationnelle', 'Valeur terminale'],
            values=[result['operating_value'], result['terminal_pv']],
            hole=0.3
        ),
        row=2, col=1
    )
    
    # Graphique 4: Projection
    years_extended = list(range(1, len(cash_flows) + 1))
    fig.add_trace(
        go.Scatter(x=years_extended, y=cash_flows, mode='lines+markers', 
                  name="Flux projet√©s", line=dict(color='green')),
        row=2, col=2
    )
    
    fig.update_layout(height=800, showlegend=True, title_text="Analyse DCF Compl√®te")
    return fig

def create_comparison_chart(valuations_dict):
    """Cr√©er un graphique de comparaison des m√©thodes"""
    methods = list(valuations_dict.keys())
    values = list(valuations_dict.values())
    
    fig = go.Figure()
    
    # Graphique en barres
    fig.add_trace(go.Bar(
        x=methods,
        y=values,
        marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'],
        text=[f"‚Ç¨{v:,.0f}" for v in values],
        textposition='auto',
    ))
    
    fig.update_layout(
        title="Comparaison des M√©thodes de Valorisation",
        xaxis_title="M√©thodes",
        yaxis_title="Valorisation (‚Ç¨)",
        height=500,
        showlegend=False
    )
    
    return fig

def generate_pdf_report(valuations_dict, company_name="Ma Startup"):
    """G√©n√©rer un rapport PDF avec les r√©sultats"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1  # Center
    )
    story.append(Paragraph(f"Rapport de Valorisation - {company_name}", title_style))
    story.append(Spacer(1, 20))
    
    # Date
    story.append(Paragraph(f"Date: {datetime.now().strftime('%d/%m/%Y')}", styles['Normal']))
    story.append(Spacer(1, 20))
    
    # R√©sum√© ex√©cutif
    story.append(Paragraph("R√©sum√© Ex√©cutif", styles['Heading2']))
    
    # Tableau des r√©sultats
    data = [['M√©thode de Valorisation', 'Valorisation (‚Ç¨)']]
    for method, value in valuations_dict.items():
        data.append([method, f"{value:,.0f} ‚Ç¨"])
    
    # Statistiques
    values = list(valuations_dict.values())
    avg_valuation = np.mean(values)
    min_valuation = min(values)
    max_valuation = max(values)
    
    data.append(['', ''])
    data.append(['Valorisation Moyenne', f"{avg_valuation:,.0f} ‚Ç¨"])
    data.append(['Valorisation Minimale', f"{min_valuation:,.0f} ‚Ç¨"])
    data.append(['Valorisation Maximale', f"{max_valuation:,.0f} ‚Ç¨"])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    story.append(Spacer(1, 30))
    
    # Recommandations
    story.append(Paragraph("Recommandations", styles['Heading2']))
    story.append(Paragraph(
        "Cette √©valuation fournit une fourchette de valorisation bas√©e sur diff√©rentes m√©thodes reconnues. "
        "Il est recommand√© de consid√©rer l'ensemble des r√©sultats plut√¥t qu'une seule m√©thode pour obtenir "
        "une vision compl√®te de la valeur de votre startup.", 
        styles['Normal']
    ))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def save_result(method_name, result):
    """Fonction pour sauvegarder les r√©sultats de mani√®re fiable"""
    if 'valuations' not in st.session_state:
        st.session_state.valuations = {}
    if 'detailed_results' not in st.session_state:
        st.session_state.detailed_results = {}
    
    # Extraction de la valorisation selon le type de r√©sultat
    if isinstance(result, dict):
        if method_name == "VC Method":
            valuation = result.get('pre_money_valuation', result.get('present_value', 0))
        else:
            valuation = result.get('valuation', 0)
    else:
        valuation = result
    
    st.session_state.valuations[method_name] = valuation
    st.session_state.detailed_results[method_name] = result
    
    return valuation

def delete_result(method_name):
    """Fonction pour supprimer un r√©sultat sauvegard√©"""
    if method_name in st.session_state.valuations:
        del st.session_state.valuations[method_name]
    if method_name in st.session_state.detailed_results:
        del st.session_state.detailed_results[method_name]

def show_saved_result(method_name, valuation):
    """Afficher un r√©sultat sauvegard√© avec style"""
    st.markdown(f"""
    <div class="saved-result">
        <strong>üíæ {method_name} sauvegard√©:</strong> {valuation:,.0f} ‚Ç¨
    </div>
    """, unsafe_allow_html=True)

def main():
    """Application principale"""
    
    # Initialisation du session state de mani√®re plus robuste
    if 'valuations' not in st.session_state:
        st.session_state.valuations = {}
    if 'detailed_results' not in st.session_state:
        st.session_state.detailed_results = {}
    if 'company_name' not in st.session_state:
        st.session_state.company_name = "Ma Startup"
    if 'company_sector' not in st.session_state:
        st.session_state.company_sector = "Technologie"
    if 'current_calculations' not in st.session_state:
        st.session_state.current_calculations = {}
    
    # En-t√™te
    st.markdown('<h1 class="main-header">üöÄ Startup Valuation Calculator</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="warning-box">
    <strong>‚ö†Ô∏è Avertissement:</strong> Ces calculs sont fournis √† titre indicatif uniquement. 
    La valorisation d'une startup d√©pend de nombreux facteurs qualitatifs et quantitatifs. 
    Consultez toujours des experts financiers pour des d√©cisions d'investissement importantes.
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar - S√©lection des m√©thodes
    st.sidebar.header("üéØ Configuration")
    
    # Informations g√©n√©rales de la startup
    st.sidebar.subheader("Informations G√©n√©rales")
    company_name = st.sidebar.text_input("Nom de la startup", value=st.session_state.company_name)
    company_sector = st.sidebar.selectbox("Secteur d'activit√©", list(SECTOR_MULTIPLES.keys()), 
                                        index=list(SECTOR_MULTIPLES.keys()).index(st.session_state.company_sector))
    
    # Mise √† jour du session state
    st.session_state.company_name = company_name
    st.session_state.company_sector = company_sector
    
    # S√©lection des m√©thodes
    st.sidebar.subheader("M√©thodes de Valorisation")
    methods = {
        "DCF": st.sidebar.checkbox("Discounted Cash Flow (DCF)", value=True),
        "Multiples": st.sidebar.checkbox("Multiples de march√©", value=True),
        "Scorecard": st.sidebar.checkbox("Scorecard Method", value=True),
        "Berkus": st.sidebar.checkbox("Berkus Method", value=False),
        "Risk Factor": st.sidebar.checkbox("Risk Factor Summation", value=False),
        "VC Method": st.sidebar.checkbox("Venture Capital Method", value=False)
    }
    
    # Bouton pour effacer tous les r√©sultats
    st.sidebar.subheader("üóëÔ∏è Gestion des R√©sultats")
    if st.sidebar.button("Effacer tous les r√©sultats", type="secondary"):
        st.session_state.valuations = {}
        st.session_state.detailed_results = {}
        st.session_state.current_calculations = {}
        st.rerun()
    
    # Affichage des r√©sultats sauvegard√©s dans la sidebar
    if st.session_state.valuations:
        st.sidebar.subheader("üìä R√©sultats Sauvegard√©s")
        for method, value in st.session_state.valuations.items():
            col1, col2 = st.sidebar.columns([3, 1])
            with col1:
                st.write(f"**{method}:** {value:,.0f} ‚Ç¨")
            with col2:
                if st.button("üóëÔ∏è", key=f"delete_{method}", help=f"Supprimer {method}"):
                    delete_result(method)
                    st.rerun()
    
    # Interface principale avec tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Calculs", "üìà Comparaison", "üìã Rapport", "‚ÑπÔ∏è Aide"])
    
    with tab1:
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # DCF Method
            if methods["DCF"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("üí∞ Discounted Cash Flow (DCF)")
                
                dcf_col1, dcf_col2 = st.columns(2)
                
                with dcf_col1:
                    st.write("**Flux de tr√©sorerie pr√©visionnels (‚Ç¨)**")
                    cf_years = st.number_input("Nombre d'ann√©es de projection", min_value=3, max_value=10, value=5, key="dcf_years")
                    cash_flows = []
                    for i in range(cf_years):
                        cf = st.number_input(f"Ann√©e {i+1}", min_value=0, value=100000*(i+1), key=f"cf_{i}")
                        cash_flows.append(cf)
                
                with dcf_col2:
                    discount_rate = st.slider("Taux d'actualisation (%)", 5.0, 25.0, 12.0, 0.5, key="discount_rate") / 100
                    terminal_growth = st.slider("Croissance terminale (%)", 0.0, 5.0, 2.0, 0.1, key="terminal_growth") / 100
                
                # Boutons d'action pour DCF
                dcf_button_col1, dcf_button_col2, dcf_button_col3 = st.columns([2, 1, 1])
                
                with dcf_button_col1:
                    if st.button("üßÆ Calculer DCF", key="calc_dcf", type="primary"):
                        dcf_result = ValuationCalculator.dcf_valuation(cash_flows, 0.1, discount_rate, terminal_growth)
                        st.session_state.current_calculations["DCF"] = dcf_result
                        st.success(f"**Valorisation DCF: {dcf_result['valuation']:,.0f} ‚Ç¨**")
                        
                        # Graphique DCF
                        fig_dcf = create_dcf_chart(dcf_result, cash_flows)
                        st.plotly_chart(fig_dcf, use_container_width=True)
                
                with dcf_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_dcf"):
                        if "DCF" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["DCF"]
                            save_result("DCF", result)
                            st.success("‚úÖ DCF sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation DCF")
                
                with dcf_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_dcf"):
                        if "DCF" in st.session_state.valuations:
                            delete_result("DCF")
                            st.success("üóëÔ∏è DCF effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "DCF" in st.session_state.valuations:
                    show_saved_result("DCF", st.session_state.valuations["DCF"])
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Market Multiples Method
            if methods["Multiples"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("üìä Multiples de March√©")
                
                mult_col1, mult_col2 = st.columns(2)
                
                with mult_col1:
                    metric_type = st.selectbox("M√©trique", ["Revenue", "EBITDA"], key="metric_type")
                    metric_value = st.number_input(f"{metric_type} annuel (‚Ç¨)", min_value=0, value=500000, key="metric_value")
                
                with mult_col2:
                    default_multiple = SECTOR_MULTIPLES[company_sector][metric_type]
                    multiple = st.number_input(f"Multiple {metric_type}", min_value=0.1, value=default_multiple, key="multiple")
                    st.info(f"Multiple moyen du secteur {company_sector}: {default_multiple}")
                
                # Boutons d'action pour Multiples
                mult_button_col1, mult_button_col2, mult_button_col3 = st.columns([2, 1, 1])
                
                with mult_button_col1:
                    if st.button("üßÆ Calculer Multiples", key="calc_mult", type="primary"):
                        mult_result = ValuationCalculator.market_multiples_valuation(metric_value, multiple, metric_type)
                        st.session_state.current_calculations["Multiples"] = mult_result
                        st.success(f"**Valorisation par Multiples: {mult_result['valuation']:,.0f} ‚Ç¨**")
                
                with mult_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_mult"):
                        if "Multiples" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["Multiples"]
                            save_result("Multiples", result)
                            st.success("‚úÖ Multiples sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation par Multiples")
                
                with mult_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_mult"):
                        if "Multiples" in st.session_state.valuations:
                            delete_result("Multiples")
                            st.success("üóëÔ∏è Multiples effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "Multiples" in st.session_state.valuations:
                    show_saved_result("Multiples", st.session_state.valuations["Multiples"])
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Scorecard Method
            if methods["Scorecard"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("üìù Scorecard Method")
                
                score_col1, score_col2 = st.columns(2)
                
                with score_col1:
                    base_valuation = st.number_input("Valorisation de base (‚Ç¨)", min_value=0, value=1000000, key="score_base")
                    st.write("**√âvaluation des crit√®res (0-5)**")
                    
                    criteria_scores = {}
                    criteria_scores["team"] = st.slider("üë• √âquipe dirigeante", 0, 5, 3, key="score_team")
                    criteria_scores["product"] = st.slider("üöÄ Produit/Service", 0, 5, 3, key="score_product")
                    criteria_scores["market"] = st.slider("üéØ March√©/Opportunit√©", 0, 5, 3, key="score_market")
                
                with score_col2:
                    st.write("**Pond√©rations (%)**")
                    weights = {}
                    weights["team"] = st.slider("üë• √âquipe", 10, 40, 25, key="weight_team") / 100
                    weights["product"] = st.slider("üöÄ Produit", 10, 30, 20, key="weight_product") / 100
                    weights["market"] = st.slider("üéØ March√©", 10, 30, 20, key="weight_market") / 100
                    weights["competition"] = st.slider("‚öîÔ∏è Concurrence", 5, 25, 15, key="weight_competition") / 100
                    weights["financial"] = st.slider("üí∞ Finances", 5, 20, 10, key="weight_financial") / 100
                    weights["legal"] = st.slider("‚öñÔ∏è L√©gal", 5, 15, 10, key="weight_legal") / 100
                    
                    criteria_scores["competition"] = st.slider("‚öîÔ∏è Position concurrentielle", 0, 5, 3, key="score_competition")
                    criteria_scores["financial"] = st.slider("üí∞ Situation financi√®re", 0, 5, 3, key="score_financial")
                    criteria_scores["legal"] = st.slider("‚öñÔ∏è Aspects l√©gaux", 0, 5, 3, key="score_legal")
                
                # V√©rification que les poids totalisent 100%
                total_weight = sum(weights.values())
                if abs(total_weight - 1.0) > 0.01:
                    st.warning(f"‚ö†Ô∏è Les pond√©rations totalisent {total_weight*100:.1f}% au lieu de 100%")
                
                # Boutons d'action pour Scorecard
                score_button_col1, score_button_col2, score_button_col3 = st.columns([2, 1, 1])
                
                with score_button_col1:
                    if st.button("üßÆ Calculer Scorecard", key="calc_scorecard", type="primary"):
                        scorecard_result = ValuationCalculator.scorecard_valuation(base_valuation, criteria_scores, weights)
                        st.session_state.current_calculations["Scorecard"] = scorecard_result
                        st.success(f"**Valorisation Scorecard: {scorecard_result['valuation']:,.0f} ‚Ç¨**")
                        st.info(f"Facteur d'ajustement: {scorecard_result['adjustment_factor']:.2f}")
                        
                        # Graphique des contributions
                        criteria_names = []
                        contributions = []
                        for criterion, analysis in scorecard_result['criteria_analysis'].items():
                            criteria_names.append(criterion.title())
                            contributions.append(analysis['contribution'])
                        
                        fig_scorecard = go.Figure(data=[
                            go.Bar(x=criteria_names, y=contributions, marker_color='lightgreen')
                        ])
                        fig_scorecard.update_layout(
                            title="Contribution de chaque crit√®re",
                            xaxis_title="Crit√®res",
                            yaxis_title="Contribution √† l'ajustement"
                        )
                        st.plotly_chart(fig_scorecard, use_container_width=True)
                
                with score_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_scorecard"):
                        if "Scorecard" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["Scorecard"]
                            save_result("Scorecard", result)
                            st.success("‚úÖ Scorecard sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation Scorecard")
                
                with score_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_scorecard"):
                        if "Scorecard" in st.session_state.valuations:
                            delete_result("Scorecard")
                            st.success("üóëÔ∏è Scorecard effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "Scorecard" in st.session_state.valuations:
                    show_saved_result("Scorecard", st.session_state.valuations["Scorecard"])
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Berkus Method
            if methods["Berkus"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("üéØ Berkus Method")
                st.info("M√©thode sp√©cialement con√ßue pour les startups pr√©-revenus. Maximum 500k‚Ç¨ par crit√®re.")
                
                berkus_col1, berkus_col2 = st.columns(2)
                
                with berkus_col1:
                    berkus_scores = {}
                    berkus_scores["concept"] = st.slider("üí° Solidit√© du concept", 0, 5, 3, key="berkus_concept")
                    berkus_scores["prototype"] = st.slider("üîß Prototype/MVP", 0, 5, 3, key="berkus_prototype")
                    berkus_scores["team"] = st.slider("üë®‚Äçüíº √âquipe dirigeante", 0, 5, 3, key="berkus_team")
                
                with berkus_col2:
                    berkus_scores["strategic_relationships"] = st.slider("ü§ù Relations strat√©giques", 0, 5, 3, key="berkus_relations")
                    berkus_scores["product_rollout"] = st.slider("üìä Lancement produit", 0, 5, 3, key="berkus_rollout")
                
                # Boutons d'action pour Berkus
                berkus_button_col1, berkus_button_col2, berkus_button_col3 = st.columns([2, 1, 1])
                
                with berkus_button_col1:
                    if st.button("üßÆ Calculer Berkus", key="calc_berkus", type="primary"):
                        berkus_result = ValuationCalculator.berkus_valuation(berkus_scores)
                        st.session_state.current_calculations["Berkus"] = berkus_result
                        st.success(f"**Valorisation Berkus: {berkus_result['valuation']:,.0f} ‚Ç¨**")
                        st.info(f"Potentiel maximum: {berkus_result['max_possible']:,.0f} ‚Ç¨")
                        
                        # Graphique en barres pour Berkus
                        criteria_names = [data['name'] for data in berkus_result['breakdown'].values()]
                        criteria_values = [data['value'] for data in berkus_result['breakdown'].values()]
                        
                        fig_berkus = go.Figure(data=[
                            go.Bar(x=criteria_names, y=criteria_values, marker_color='orange')
                        ])
                        fig_berkus.update_layout(
                            title="R√©partition de la valorisation Berkus",
                            xaxis_title="Crit√®res",
                            yaxis_title="Valeur (‚Ç¨)"
                        )
                        st.plotly_chart(fig_berkus, use_container_width=True)
                
                with berkus_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_berkus"):
                        if "Berkus" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["Berkus"]
                            save_result("Berkus", result)
                            st.success("‚úÖ Berkus sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation Berkus")
                
                with berkus_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_berkus"):
                        if "Berkus" in st.session_state.valuations:
                            delete_result("Berkus")
                            st.success("üóëÔ∏è Berkus effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "Berkus" in st.session_state.valuations:
                    show_saved_result("Berkus", st.session_state.valuations["Berkus"])
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Risk Factor Summation Method
            if methods["Risk Factor"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("‚ö†Ô∏è Risk Factor Summation")
                
                risk_base_val = st.number_input("Valorisation de base (‚Ç¨)", min_value=0, value=1000000, key="risk_base")
                
                st.write("**√âvaluation des facteurs de risque (-2: Tr√®s risqu√©, 0: Neutre, +2: Tr√®s favorable)**")
                
                risk_col1, risk_col2 = st.columns(2)
                
                with risk_col1:
                    risk_factors = {}
                    risk_factors["management"] = st.slider("üë®‚Äçüíº Risque de gestion", -2, 2, 0, key="risk_mgmt")
                    risk_factors["stage"] = st.slider("üöÄ Stade de d√©veloppement", -2, 2, 0, key="risk_stage")
                    risk_factors["legislation"] = st.slider("‚öñÔ∏è Risque l√©gislatif", -2, 2, 0, key="risk_legal")
                    risk_factors["manufacturing"] = st.slider("üè≠ Risque de production", -2, 2, 0, key="risk_manuf")
                    risk_factors["sales"] = st.slider("üíº Risque commercial", -2, 2, 0, key="risk_sales")
                    risk_factors["funding"] = st.slider("üí∞ Risque de financement", -2, 2, 0, key="risk_funding")
                
                with risk_col2:
                    risk_factors["competition"] = st.slider("‚öîÔ∏è Risque concurrentiel", -2, 2, 0, key="risk_comp")
                    risk_factors["technology"] = st.slider("üíª Risque technologique", -2, 2, 0, key="risk_tech")
                    risk_factors["litigation"] = st.slider("‚öñÔ∏è Risque juridique", -2, 2, 0, key="risk_litigation")
                    risk_factors["international"] = st.slider("üåç Risque international", -2, 2, 0, key="risk_intl")
                    risk_factors["reputation"] = st.slider("üèÜ Risque de r√©putation", -2, 2, 0, key="risk_rep")
                    risk_factors["exit"] = st.slider("üö™ Risque de sortie", -2, 2, 0, key="risk_exit")
                
                # Boutons d'action pour Risk Factor
                risk_button_col1, risk_button_col2, risk_button_col3 = st.columns([2, 1, 1])
                
                with risk_button_col1:
                    if st.button("üßÆ Calculer Risk Factor", key="calc_risk", type="primary"):
                        risk_result = ValuationCalculator.risk_factor_summation(risk_base_val, risk_factors)
                        st.session_state.current_calculations["Risk Factor"] = risk_result
                        st.success(f"**Valorisation ajust√©e: {risk_result['valuation']:,.0f} ‚Ç¨**")
                        st.info(f"Ajustement total: {risk_result['total_adjustment']*100:+.1f}%")
                        
                        # Graphique des ajustements de risque
                        risk_names = [analysis['name'] for analysis in risk_result['risk_analysis'].values()]
                        risk_adjustments = [analysis['adjustment']*100 for analysis in risk_result['risk_analysis'].values()]
                        
                        colors_risk = ['red' if x < 0 else 'green' if x > 0 else 'gray' for x in risk_adjustments]
                        
                        fig_risk = go.Figure(data=[
                            go.Bar(x=risk_names, y=risk_adjustments, marker_color=colors_risk)
                        ])
                        fig_risk.update_layout(
                            title="Impact des facteurs de risque (%)",
                            xaxis_title="Facteurs de risque",
                            yaxis_title="Ajustement (%)"
                        )
                        st.plotly_chart(fig_risk, use_container_width=True)
                
                with risk_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_risk"):
                        if "Risk Factor" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["Risk Factor"]
                            save_result("Risk Factor", result)
                            st.success("‚úÖ Risk Factor sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation Risk Factor")
                
                with risk_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_risk"):
                        if "Risk Factor" in st.session_state.valuations:
                            delete_result("Risk Factor")
                            st.success("üóëÔ∏è Risk Factor effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "Risk Factor" in st.session_state.valuations:
                    show_saved_result("Risk Factor", st.session_state.valuations["Risk Factor"])
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Venture Capital Method
            if methods["VC Method"]:
                st.markdown('<div class="method-card">', unsafe_allow_html=True)
                st.subheader("üè¶ Venture Capital Method")
                
                vc_col1, vc_col2 = st.columns(2)
                
                with vc_col1:
                    expected_revenue = st.number_input("Revenus attendus √† la sortie (‚Ç¨)", min_value=0, value=10000000, key="vc_revenue")
                    exit_multiple = st.number_input("Multiple de sortie", min_value=0.1, value=5.0, key="vc_multiple")
                    required_return = st.slider("Retour annuel requis (%)", 15.0, 50.0, 25.0, key="vc_return") / 100
                
                with vc_col2:
                    years_to_exit = st.number_input("Ann√©es jusqu'√† la sortie", min_value=1, max_value=10, value=5, key="vc_years")
                    investment_needed = st.number_input("Investissement n√©cessaire (‚Ç¨)", min_value=0, value=2000000, key="vc_investment")
                
                # Boutons d'action pour VC Method
                vc_button_col1, vc_button_col2, vc_button_col3 = st.columns([2, 1, 1])
                
                with vc_button_col1:
                    if st.button("üßÆ Calculer VC Method", key="calc_vc", type="primary"):
                        vc_result = ValuationCalculator.venture_capital_method(
                            expected_revenue, exit_multiple, required_return, years_to_exit, investment_needed
                        )
                        st.session_state.current_calculations["VC Method"] = vc_result
                        st.success(f"**Valorisation pr√©-money: {vc_result.get('pre_money_valuation', vc_result['present_value']):,.0f} ‚Ç¨**")
                        
                        # M√©triques VC
                        vc_metrics_col1, vc_metrics_col2 = st.columns(2)
                        with vc_metrics_col1:
                            st.metric("Valeur √† la sortie", f"{vc_result['exit_value']:,.0f} ‚Ç¨")
                            st.metric("Multiple de retour", f"{vc_result['expected_return_multiple']:.1f}x")
                        
                        with vc_metrics_col2:
                            if 'ownership_percentage' in vc_result:
                                st.metric("Part n√©cessaire", f"{vc_result['ownership_percentage']*100:.1f}%")
                            st.metric("Retour annualis√©", f"{vc_result['annualized_return']*100:.1f}%")
                
                with vc_button_col2:
                    if st.button("üíæ Sauvegarder", key="save_vc"):
                        if "VC Method" in st.session_state.current_calculations:
                            result = st.session_state.current_calculations["VC Method"]
                            save_result("VC Method", result)
                            st.success("‚úÖ VC Method sauvegard√©!")
                            st.rerun()
                        else:
                            st.error("Calculez d'abord la valorisation VC Method")
                
                with vc_button_col3:
                    if st.button("üóëÔ∏è Effacer", key="clear_vc"):
                        if "VC Method" in st.session_state.valuations:
                            delete_result("VC Method")
                            st.success("üóëÔ∏è VC Method effac√©!")
                            st.rerun()
                
                # Affichage des r√©sultats sauvegard√©s
                if "VC Method" in st.session_state.valuations:
                    show_saved_result("VC Method", st.session_state.valuations["VC Method"])
                
                st.markdown('</div>', unsafe_allow_html=True)
        
        # Sidebar des r√©sultats
        with col2:
            if st.session_state.valuations:
                st.subheader("üìà R√©sultats Actuels")
                
                for method, value in st.session_state.valuations.items():
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>{method}</h4>
                        <h3>{value:,.0f} ‚Ç¨</h3>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Statistiques r√©sum√©es
                if len(st.session_state.valuations) > 1:
                    values = list(st.session_state.valuations.values())
                    st.markdown("### üìä Statistiques")
                    st.metric("Moyenne", f"{np.mean(values):,.0f} ‚Ç¨")
                    st.metric("M√©diane", f"{np.median(values):,.0f} ‚Ç¨")
                    st.metric("√âcart-type", f"{np.std(values):,.0f} ‚Ç¨")
                    st.metric("Min - Max", f"{min(values):,.0f} ‚Ç¨ - {max(values):,.0f} ‚Ç¨")
            else:
                st.info("Calculez et sauvegardez des r√©sultats pour voir l'analyse comparative")
    
    with tab2:
        st.header("üìà Analyse Comparative")
        
        if len(st.session_state.valuations) >= 2:
            # Graphique de comparaison
            fig_comparison = create_comparison_chart(st.session_state.valuations)
            st.plotly_chart(fig_comparison, use_container_width=True)
            
            # Analyse statistique
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìä Statistiques Descriptives")
                values = list(st.session_state.valuations.values())
                stats_df = pd.DataFrame({
                    'M√©trique': ['Moyenne', 'M√©diane', '√âcart-type', 'Minimum', 'Maximum', 'Coefficient de variation'],
                    'Valeur': [
                        f"{np.mean(values):,.0f} ‚Ç¨",
                        f"{np.median(values):,.0f} ‚Ç¨",
                        f"{np.std(values):,.0f} ‚Ç¨",
                        f"{min(values):,.0f} ‚Ç¨",
                        f"{max(values):,.0f} ‚Ç¨",
                        f"{np.std(values)/np.mean(values)*100:.1f}%"
                    ]
                })
                st.dataframe(stats_df, hide_index=True)
            
            with col2:
                st.subheader("üéØ Recommandations")
                cv = np.std(values) / np.mean(values)
                
                if cv < 0.3:
                    st.success("‚úÖ **Convergence forte** - Les m√©thodes donnent des r√©sultats coh√©rents")
                elif cv < 0.6:
                    st.warning("‚ö†Ô∏è **Convergence mod√©r√©e** - Variabilit√© acceptable entre les m√©thodes")
                else:
                    st.error("‚ùå **Forte divergence** - Revoir les hypoth√®ses ou se concentrer sur les m√©thodes les plus pertinentes")
                
                # Fourchette de valorisation recommand√©e
                percentile_25 = np.percentile(values, 25)
                percentile_75 = np.percentile(values, 75)
                st.info(f"**Fourchette recommand√©e:** {percentile_25:,.0f} ‚Ç¨ - {percentile_75:,.0f} ‚Ç¨")
        else:
            st.info("üí° Calculez et sauvegardez au moins 2 m√©thodes de valorisation pour voir l'analyse comparative.")
            if st.session_state.valuations:
                st.write("**R√©sultats disponibles:**")
                for method, value in st.session_state.valuations.items():
                    st.write(f"- {method}: {value:,.0f} ‚Ç¨")
    
    with tab3:
        st.header("üìã Rapport de Valorisation")
        
        if st.session_state.valuations:
            # G√©n√©ration du rapport PDF
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.subheader("R√©sum√© du Rapport")
                
                # Tableau des r√©sultats
                results_df = pd.DataFrame([
                    {'M√©thode': method, 'Valorisation (‚Ç¨)': f"{value:,.0f}", 'Valorisation': value}
                    for method, value in st.session_state.valuations.items()
                ])
                
                st.dataframe(results_df[['M√©thode', 'Valorisation (‚Ç¨)']], hide_index=True)
                
                # Synth√®se
                values = list(st.session_state.valuations.values())
                st.markdown(f"""
                ### üéØ Synth√®se Ex√©cutive
                
                **Entreprise:** {st.session_state.company_name}  
                **Secteur:** {st.session_state.company_sector}  
                **Date d'√©valuation:** {datetime.now().strftime('%d/%m/%Y')}
                
                **Fourchette de valorisation:** {min(values):,.0f} ‚Ç¨ - {max(values):,.0f} ‚Ç¨  
                **Valorisation m√©diane:** {np.median(values):,.0f} ‚Ç¨  
                **Nombre de m√©thodes utilis√©es:** {len(st.session_state.valuations)}
                """)
            
            with col2:
                # Bouton de t√©l√©chargement PDF
                if st.button("üì• G√©n√©rer Rapport PDF", type="primary"):
                    try:
                        pdf_buffer = generate_pdf_report(st.session_state.valuations, st.session_state.company_name)
                        
                        st.download_button(
                            label="‚¨áÔ∏è T√©l√©charger PDF",
                            data=pdf_buffer,
                            file_name=f"rapport_valorisation_{st.session_state.company_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.pdf",
                            mime="application/pdf"
                        )
                        st.success("‚úÖ Rapport PDF g√©n√©r√© avec succ√®s!")
                    except Exception as e:
                        st.error(f"‚ùå Erreur lors de la g√©n√©ration du PDF: {str(e)}")
        else:
            st.info("üìä Aucune valorisation calcul√©e. Retournez √† l'onglet 'Calculs' pour commencer.")
            st.markdown("""
            ### Comment proc√©der:
            1. Retournez √† l'onglet **üìä Calculs**
            2. S√©lectionnez une ou plusieurs m√©thodes de valorisation
            3. Remplissez les param√®tres requis
            4. Cliquez sur **üßÆ Calculer** puis **üíæ Sauvegarder**
            5. R√©p√©tez pour d'autres m√©thodes
            6. Revenez ici pour g√©n√©rer votre rapport
            """)
    
    with tab4:
        st.header("‚ÑπÔ∏è Guide d'Utilisation")
        
        st.markdown("""
        ## üéØ Comment utiliser ce calculateur
        
        ### 1. Configuration initiale
        - Renseignez le nom de votre startup et son secteur d'activit√©
        - S√©lectionnez les m√©thodes de valorisation pertinentes pour votre situation
        
        ### 2. Choix des m√©thodes
        
        **Pour les startups avec revenus :**
        - ‚úÖ DCF (si flux de tr√©sorerie pr√©visibles)
        - ‚úÖ Multiples de march√©
        - ‚úÖ Scorecard Method
        
        **Pour les startups pr√©-revenus :**
        - ‚úÖ Berkus Method
        - ‚úÖ Scorecard Method
        - ‚úÖ Risk Factor Summation
        
        **Pour les lev√©es de fonds :**
        - ‚úÖ Venture Capital Method
        - ‚úÖ DCF
        
        ### 3. Flux de travail recommand√©
        
        **√âtape 1:** Configuration
        - Configurez le nom et secteur dans la sidebar
        - Cochez les m√©thodes pertinentes
        
        **√âtape 2:** Calculs
        - Pour chaque m√©thode s√©lectionn√©e:
          1. Remplissez les param√®tres requis
          2. Cliquez sur **üßÆ Calculer**
          3. V√©rifiez les r√©sultats et graphiques
          4. Cliquez sur **üíæ Sauvegarder** pour conserver le r√©sultat
        
        **√âtape 3:** Analyse
        - Consultez l'onglet **üìà Comparaison** pour analyser les √©carts
        - G√©n√©rez le rapport PDF dans l'onglet **üìã Rapport**
        
        ### 4. Gestion des r√©sultats
        
        **Boutons de contr√¥le pour chaque m√©thode :**
        - üßÆ **Calculer** : Lance le calcul avec les param√®tres actuels
        - üíæ **Sauvegarder** : Enregistre le r√©sultat pour la comparaison (requis!)
        - üóëÔ∏è **Effacer** : Supprime le r√©sultat sauvegard√© de cette m√©thode
        
        **Contr√¥le global dans la sidebar :**
        - üóëÔ∏è **Effacer tous les r√©sultats** : Reset complet
        - üóëÔ∏è Boutons individuels pour supprimer chaque m√©thode sauvegard√©e
        
        ### 5. Interpr√©tation des r√©sultats
        
        #### üü¢ Convergence forte (CV < 30%)
        Les m√©thodes donnent des r√©sultats similaires ‚Üí Valorisation fiable
        
        #### üü° Convergence mod√©r√©e (CV 30-60%)
        Variabilit√© acceptable ‚Üí Utiliser une fourchette
        
        #### üî¥ Forte divergence (CV > 60%)
        Revoir les hypoth√®ses ou se concentrer sur les m√©thodes les plus adapt√©es
        
        ### 6. Limites et pr√©cautions
        
        ‚ö†Ô∏è **Important :** Ces calculs sont indicatifs uniquement
        - La valorisation d√©pend de nombreux facteurs qualitatifs
        - Le contexte de march√© influence fortement les r√©sultats
        - Consultez des experts pour des d√©cisions importantes
        
        ### 7. R√©solution des probl√®mes courants
        
        **Probl√®me:** Le bouton "Sauvegarder" ne fonctionne pas
        - **Solution:** Assurez-vous d'avoir d'abord cliqu√© sur "üßÆ Calculer"
        
        **Probl√®me:** Pas de graphique de comparaison
        - **Solution:** Sauvegardez au moins 2 m√©thodes de valorisation
        
        **Probl√®me:** Impossible de g√©n√©rer le PDF
        - **Solution:** V√©rifiez qu'au moins une m√©thode est sauvegard√©e
        
        **Probl√®me:** Les pond√©rations ne totalisent pas 100%
        - **Solution:** Ajustez les sliders pour que la somme soit exactement 100%
        
        ### 8. Conseils d'utilisation avanc√©e
        
        **Analyse de sensibilit√©:**
        - Testez diff√©rents sc√©narios en modifiant les param√®tres
        - Comparez les r√©sultats pour identifier les variables critiques
        
        **Choix des m√©thodes selon le contexte:**
        - **Startup tech avec traction:** DCF + Multiples + VC Method
        - **Startup pr√©-revenus:** Berkus + Scorecard + Risk Factor
        - **Lev√©e de fonds s√©rie A:** DCF + VC Method + Multiples
        
        ### 9. Sources et r√©f√©rences
        
        - **DCF :** Damodaran, Aswath. "Investment Valuation"
        - **Multiples :** PwC Money Tree Reports, CB Insights
        - **Berkus Method :** Dave Berkus, "Basic Angel Investing"
        - **Scorecard :** Bill Payne, Angel Capital Association
        - **Risk Factor :** Various VC and Angel methodologies
        - **VC Method :** Venture Capital industry standard practices
        
        ### 10. Support et am√©liorations
        
        Cette application est en d√©veloppement continu. Pour signaler des bugs ou sugg√©rer des am√©liorations:
        - V√©rifiez d'abord ce guide de d√©pannage
        - Documentez pr√©cis√©ment les √©tapes qui posent probl√®me
        - Proposez des am√©liorations sur le repository GitHub
        """)

if __name__ == "__main__":
    main()
